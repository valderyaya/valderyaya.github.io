<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Competitive Programming on valderyaya library</title>
    <link>http://localhost:1313/tags/competitive-programming/</link>
    <description>Recent content in Competitive Programming on valderyaya library</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Feb 2025 10:39:33 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/competitive-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>持久化線段樹</title>
      <link>http://localhost:1313/posts/%E6%8C%81%E4%B9%85%E5%8C%96%E7%B7%9A%E6%AE%B5%E6%A8%B9/</link>
      <pubDate>Wed, 26 Feb 2025 10:39:33 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E6%8C%81%E4%B9%85%E5%8C%96%E7%B7%9A%E6%AE%B5%E6%A8%B9/</guid>
      <description>&lt;p&gt;我們先來看一下 CSES 1737 的這道&lt;a href=&#34;https://cses.fi/problemset/task/1737/&#34;&gt;題目&lt;/a&gt;：&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;題目大意是維護一個集合， 集合裡面有很多 array（初始為一個），你要維護以下三種操作：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;把第 k 個版本的 array 的位置 a 的值改成 x&lt;/li&gt;&#xA;&lt;li&gt;求出第 k 個版本的 array 中位置 a 到 b 的區間和&lt;/li&gt;&#xA;&lt;li&gt;複製第 k 個版本的 array&lt;/li&gt;&#xA;&lt;/ol&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;什麼是持久化線段樹&#34;&gt;什麼是持久化線段樹&lt;/h2&gt;&#xA;&lt;p&gt;持久化就是保存歷史版本，我們每次在線段樹上修改某個東西就會新建一個版本，這樣如果我們要知道修改之前資料的樣子是什麼，就可以跳回那個版本。&lt;/p&gt;&#xA;&lt;p&gt;對線段樹上進行持久化，最簡單的想法就是每次修改的時候，直接複製一整顆線段樹，但這樣的話太浪費記憶體空間了。&lt;/p&gt;&#xA;&lt;p&gt;仔細回想一下在線段樹的修改（以單點修改爲例），會發現其實每次有改到的點只有根到葉子的那一條鏈，而其他節點的值都不變。&lt;/p&gt;&#xA;&lt;p&gt;（修改第13個點的值）&#xA;&lt;img src=&#34;../../static/%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;所以每次遞迴修改的時候，遇到需要修改的子節點就新建一個指標給它，另一個未修改到的子節點就連回上一個版本的指標位置，其餘的部分都跟普通的線段樹一樣。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../../static/%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;空間複雜度&#34;&gt;空間複雜度&lt;/h3&gt;&#xA;&lt;p&gt;如果序列長度為 N ，那每次單點修改需要增加  log{ N } 個點，如果有 Q 次修改操作，需要增加的節點數就是 Q \times log{N}，加上原本線段樹的節點 2N - 1 ， 持久化線段樹的總空間會到 2N -1 + Qlog{N}。&lt;/p&gt;&#xA;&lt;h3 id=&#34;時間複雜度&#34;&gt;時間複雜度&lt;/h3&gt;&#xA;&lt;p&gt;持久化線段樹的操作的時間複雜度與普通的線段樹是一樣的，以這題爲例，建樹的時間複雜度是 O(N) ，單點修改（即題目的操作 1 ）的時間複雜度是 O(log{N}) ， 區間查詢（即題目的操作 2 ）的時間為 O(log{N}) ，總時間複雜度為 O(N) + O(Qlog{N}) 。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
